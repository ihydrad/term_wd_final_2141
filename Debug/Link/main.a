;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x50
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_standby=0x40
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;#include <1wire.h>
;#include <ds18b20.h>
;#include <delay.h>
;
;#define SBI(BYTE,BIT)         BYTE|=(1<<BIT)
;#define CBI(BYTE,BIT)         BYTE&=~(1<<BIT)
;
;#define ROOM        0
;#define OUT         1
;
;#define SEG_PORT    PORTB
;#define DIG0_ON     PORTD.3 = 1
;#define DIG1_ON     PORTD.4 = 1
;#define DIG2_ON     PORTD.5 = 1
;#define DIG3_ON     PORTD.6 = 1
;
;#define DIGITS_OFF  PORTD  = 0x00
;#define DIGITS_ON   PORTD |= 0x70
;
;float         temp;
;
;signed char   var;
;
;unsigned char devices,
;              num[4],
;              refresh,
;              cnt,
;              rom_code[2][9],
;              chars[] = {
;               0x80,  //  0
;               0xF2,  //  1
;               0x48,  //  2
;               0x60,  //  3
;               0x32,  //  4
;               0x24,  //  5
;               0x04,  //  6
;               0xF0,  //  7
;               0x00,  //  8
;               0x20,  //  9
;               0x7E,  //  -
;               0x39   //  gr
;              };

	.DSEG
;
;void initdev()
; 0000 002E {

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0000 002F DDRB = 0xFE;
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
; 0000 0030 PORTB = 0x00;
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0031 
; 0000 0032 DDRD = 0x78;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0033 PORTD = 0x00;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0034 
; 0000 0035 TIMSK  = 0x40;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0036 TCCR1B = 0x05;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0037 OCR1AH = 0x5B;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0038 OCR1AL = 0x8E;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0039 
; 0000 003A w1_init();
;PCODE: $0000001C VOL: 0
; 0000 003B devices = w1_search(0xF0, rom_code);
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 003C ds18b20_init(&rom_code[ROOM][0], 0, 0, 0);
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 003D ds18b20_init(&rom_code[OUT][0], 0, 0, 0);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 003E }
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;
;void WD()
; 0000 0041 {
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0042  #asm("cli")
;PCODE: $00000037 VOL: 0
	cli
;PCODE: $00000038 VOL: 0
; 0000 0043  #asm("wdr")
;PCODE: $00000039 VOL: 0
	wdr
;PCODE: $0000003A VOL: 0
; 0000 0044  WDTCSR |= (1<<WDCE) | (1<<WDE);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0045  WDTCSR = (1<<WDE) | (1<<WDP2) | (1<<WDP0);
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0046  #asm("sei")
;PCODE: $00000040 VOL: 0
	sei
;PCODE: $00000041 VOL: 0
; 0000 0047 }
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;
;void read_sens(unsigned char chan)
; 0000 004A {
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 004B  if(devices)
;PCODE: $00000046 VOL: 0
;	chan -> Y+0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 004C    {
; 0000 004D     temp = ds18b20_temperature(&rom_code[chan][0]);
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 004E     var = (char)temp;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 004F 
; 0000 0050     if(var & 0x80)
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0051      {
; 0000 0052      num[3] = 10;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0053 
; 0000 0054      var = ~var;
;PCODE: $00000059 VOL: 0
; 0000 0055 
; 0000 0056      if(var /  10) num[2] = var /  10;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0057      else num[2] = 0;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0058 
; 0000 0059      num[1] = (var %  10) + 1;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 005A      }
; 0000 005B 
; 0000 005C      else
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 005D      {
; 0000 005E      if(var /  100) num[3] = var /  10;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 005F      else num[3] = 0;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0060 
; 0000 0061      if(var /  10) num[2] = var /  10;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0062      else num[2] = 0;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0063 
; 0000 0064      num[1] = var %  10;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0065      }
;PCODE: $0000009F VOL: 0
; 0000 0066    }
; 0000 0067 }
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;
;void disp_drv()
; 0000 006A {
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 006B  if(devices)
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 006C    {
; 0000 006D     DIGITS_OFF;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 006E     DIG0_ON;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 006F     SEG_PORT = chars[11];
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 0070     delay_us(50);
;PCODE: $000000AF VOL: 0
; 0000 0071 
; 0000 0072     DIGITS_OFF;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0073     DIG1_ON;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0074     SEG_PORT = chars[num[1]];
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0075     delay_us(50);
;PCODE: $000000B9 VOL: 0
; 0000 0076 
; 0000 0077     if(num[2])
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 0078      {
; 0000 0079       DIGITS_OFF;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 007A       DIG2_ON;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 007B       SEG_PORT = chars[num[2]];
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 007C       delay_us(50);
;PCODE: $000000C7 VOL: 0
; 0000 007D      }
; 0000 007E 
; 0000 007F     if(num[3])
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 0080      {
; 0000 0081       DIGITS_OFF;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 0082       DIG3_ON;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 0083       SEG_PORT = chars[num[3]];
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 0084       delay_us(50);
;PCODE: $000000D6 VOL: 0
; 0000 0085      }
; 0000 0086    }
;PCODE: $000000D7 VOL: 0
; 0000 0087 
; 0000 0088  else
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 0089    {
; 0000 008A     SEG_PORT = chars[10];
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 008B     DIGITS_ON;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 008C    }
;PCODE: $000000E0 VOL: 0
; 0000 008D }
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;
;void main()
; 0000 0090 {
;PCODE: $000000E3 VOL: 0
; 0000 0091  char first_st = 1;
; 0000 0092 
; 0000 0093  initdev();
;	first_st -> R17
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 0094  WD();
;PCODE: $000000E7 VOL: 0
; 0000 0095  TCNT1H = 0x5B;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 0096  TCNT1L = 0x88;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 0097 
; 0000 0098  #asm("sei")
;PCODE: $000000EC VOL: 0
	sei
;PCODE: $000000ED VOL: 0
; 0000 0099 
; 0000 009A while (1)
;PCODE: $000000EE VOL: 0
; 0000 009B     {
; 0000 009C      #asm("wdr")
;PCODE: $000000EF VOL: 0
	wdr
;PCODE: $000000F0 VOL: 0
; 0000 009D      if(!first_st) disp_drv();
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 009E 
; 0000 009F      if(refresh)
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 00A0       {
; 0000 00A1        read_sens(cnt);
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00A2        refresh = 0;
;PCODE: $000000F9 VOL: 0
; 0000 00A3        first_st = 0;
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 00A4       }
; 0000 00A5     }
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 00A6 }
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;
;interrupt [TIM1_COMPA] void delay_3s()
; 0000 00A9 {
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00AA  refresh = 1;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00AB  if(!cnt) cnt = 1;
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00AC  else cnt = 0;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 00AD 
; 0000 00AE  TCNT1H = 0;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 00AF  TCNT1L = 0;
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 00B0 }
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
